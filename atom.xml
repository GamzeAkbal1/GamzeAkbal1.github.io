<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gamze's Blog]]></title>
  <link href="http://gamzeakbal1.github.io/atom.xml" rel="self"/>
  <link href="http://gamzeakbal1.github.io/"/>
  <updated>2016-08-01T16:08:14+03:00</updated>
  <id>http://gamzeakbal1.github.io/</id>
  <author>
    <name><![CDATA[Gamze Akbal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Semantic Versioning]]></title>
    <link href="http://gamzeakbal1.github.io/blog/2016/08/01/semantic-versioning/"/>
    <updated>2016-08-01T15:33:21+03:00</updated>
    <id>http://gamzeakbal1.github.io/blog/2016/08/01/semantic-versioning</id>
    <content type="html"><![CDATA[<h3>Semantic Verisoning</h3>

<p>*Semantic Versioning using to show changes in the software *</p>

<p><em>Semantic Versioning is expressed as X.Y.Z|p</em></p>

<p><strong>X:</strong> <em>meaning Major changes</em></p>

<p><em>After the major changes Y and Z is reset</em></p>

<p><strong>For Example:</strong></p>

<p><em>1.2.5 if this version to undergo major changes it will become like this &mdash;> 2.0.0</em></p>

<p><strong>Y:</strong> <em>meaning Minor changes</em></p>

<p><em>After the minor changes Z is reset</em></p>

<p><strong>For Example</strong></p>

<p>*2.8.4 after the changes become &mdash;> 2.9.0</p>

<p><strong>Z:</strong> <em>meaning patch</em></p>

<p>When the bugs fixed Z will increase</p>

<p><strong>P:</strong></p>

<p><em>p is optional you don&rsquo;t have to use</em></p>

<p>If you want to learn more u can check it out <a href="https://github.com/lab2023/playbook/blob/develop/development/cevik_proje_yonetimi.md/" title="LAB2023">Lab2023</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WORKSHOP'S NOTES]]></title>
    <link href="http://gamzeakbal1.github.io/blog/2016/07/31/second-post/"/>
    <updated>2016-07-31T21:48:10+03:00</updated>
    <id>http://gamzeakbal1.github.io/blog/2016/07/31/second-post</id>
    <content type="html"><![CDATA[<p><em>To be honest i didn&rsquo;t understand many things because im starting late and i had no prior knowledge about rails Generally i try to catch up the others when i try to errors they  move on the another topic but it was a great opportunity and exprience for me.Thanks to workshop i believe i can learn easily ruby on rails in the linux camp.</em></p>

<h3>ORM</h3>

<p><em>ORM  for every object in the database generates an object in the code side</em>
<em>These programs use code generation technique produces automatic code we need to write.</em></p>

<p>Lets try ActiveRecord</p>

<p>First step  we&rsquo;re going to install;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$gem</span> install activerecord
</span></code></pre></td></tr></table></div></figure>


<p>Than lets use</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   require <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'>  require <span class="s1">&#39;activerecord&#39;</span>
</span><span class='line'>  ActiveRecord::Base.establish_connection<span class="o">(</span>
</span><span class='line'>  :adapter<span class="o">=</span>&gt; <span class="s2">&quot;mysql&quot;</span>,
</span><span class='line'>  :host <span class="o">=</span>&gt; <span class="s2">&quot;localhost&quot;</span>,
</span><span class='line'>  :database<span class="o">=</span>&gt; <span class="s2">&quot;articles&quot;</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  class Article &lt; ActiveRecord::Base
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  <span class="c">#Creating a new article</span>
</span><span class='line'>  Article.create<span class="o">(</span>title:<span class="s1">&#39;ORM&#39;</span>, author:<span class="s1">&#39;Manu&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">#Fetching an article</span>
</span><span class='line'>  <span class="nv">article</span> <span class="o">=</span> Article.find<span class="o">(</span>:first<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">#Destroy an article</span>
</span><span class='line'>  Article.find<span class="o">(</span>:first<span class="o">)</span>.destroy <span class="se">\\</span>find takes id u can write <span class="s2">&quot;txt&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WORKSHOP'S NOTES]]></title>
    <link href="http://gamzeakbal1.github.io/blog/2016/07/31/octopress-blogging/"/>
    <updated>2016-07-31T21:36:39+03:00</updated>
    <id>http://gamzeakbal1.github.io/blog/2016/07/31/octopress-blogging</id>
    <content type="html"><![CDATA[<h3>WHAT IS RUBY ON RAILS?</h3>

<p><em>Ruby on Rails (RoR) or Rails is an open source web application development framework written Ruby language which is based on Model-View-Controller(MVC),Dont Repeat Yourself(DRY) and Convention over Configuration  (CoC) approch.</em></p>

<h3>Well What are these ?</h3>

<h3>Lets start with MVC!</h3>

<p><em>MVC is an architectural pattern which is used software engineering.</em></p>

<p><strong>MODEL</strong></p>

<ul>
<li>Represent the data used in practice and is part of the processing logic of the stored data.</li>
<li>To save the data in the database or get the records in the database.</li>
</ul>


<p><strong>VIEW</strong></p>

<ul>
<li>This part that users see.</li>
</ul>


<p><strong>CONTROLLER</strong></p>

<ul>
<li>Performs bring in taking action between Model and View.</li>
<li>Controller sends data to the Model received from the View or sends data to the View received from the Model.</li>
<li>Basically Controller is a bridge between Model and View.</li>
</ul>


<p><img src="http://kodbas.com/wp-content/uploads/2014/04/Beh3a.png" title="mvc diagram" alt="mvc" /></p>

<h3>DRY</h3>

<p><em>According to DRY principle programmer should avoid writing again same code blog during the coding</em></p>

<ul>
<li>WITHOUT DRY;</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">(</span> repo.data<span class="o">(</span> <span class="s2">&quot;currently&quot;</span> <span class="o">)</span> !<span class="o">==</span> <span class="s2">&quot;showing&quot;</span> <span class="o">)</span> <span class="o">{</span> repo.stop<span class="o">()</span><span class="p">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span> repo1.data<span class="o">(</span> <span class="s2">&quot;currently&quot;</span> <span class="o">)</span> !<span class="o">==</span> <span class="s2">&quot;showing&quot;</span> <span class="o">)</span> <span class="o">{</span> repo1.stop<span class="o">()</span><span class="p">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span> repo2.data<span class="o">(</span> <span class="s2">&quot;currently&quot;</span> <span class="o">)</span> !<span class="o">==</span> <span class="s2">&quot;showing&quot;</span> <span class="o">)</span> <span class="o">{</span> repo2.stop<span class="o">()</span><span class="p">;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>WITH DRY;</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>var <span class="nv">repos</span> <span class="o">=</span> <span class="o">[</span> repo, repo1, repo2 <span class="o">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$.</span>each<span class="o">(</span> repos, <span class="k">function</span><span class="o">(</span> i, rep <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span> rep.data<span class="o">(</span> <span class="s2">&quot;currently&quot;</span> <span class="o">)</span> !<span class="o">==</span> <span class="s2">&quot;showing&quot;</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span> rep.stop<span class="o">()</span><span class="p">;</span> <span class="o">}</span> <span class="o">})</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CoC</h3>

<p><em>Convention Over Configuration concept to reduce the time during configurations deal of developer and is used to reduce human-induced errors.</em>
<em>Ruby on Rails framework is an example of a framework that uses this concept.</em>
<em>Let&rsquo;s say that our application with a class map table in the database. single developer writing of that map which field which column in this class is a job that is error-prone and time costs</em>
<em>If the developer following naming rules the this class will be set  which field  mapping to which cloums</em></p>
]]></content>
  </entry>
  
</feed>
